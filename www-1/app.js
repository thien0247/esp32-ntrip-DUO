(function() {'use strict';const CONFIG = {AUTO_SAVE_DELAY: 1000, MAX_RETRIES: 3, STATUS_UPDATE_INTERVAL: 2500, RESTART_WAIT_TIME: 2500, ENDPOINTS: {CONFIG: '/config', STATUS: '/status', WIFI_SCAN: '/wifi/scan' }, RELEASES_API_URL: 'https: RELEASES_HTML_URL: 'https: };let state = {currentConfig: {}, statusUpdateTimer: null, reloadOnStatus: false, isSubmitting: false };function debounce(func, wait) {let timeout;return function executedFunction(...args) {const later = () => {clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout = setTimeout(later, wait);};}function serializeForm(form) {const formData = new FormData(form);const data = {};for (const [key, value] of formData.entries()) {if (data[key]) {if (!Array.isArray(data[key])) {data[key] = [data[key]];}data[key].push(value);}else {data[key] = value;}}return data;}async function makeRequest(url, options = {}) {try {const controller = new AbortController();const timeoutId = setTimeout(() => controller.abort(), 2000);const response = await fetch(url, {headers: {'Content-Type': 'application/json', ...options.headers }, signal: controller.signal, ...options });clearTimeout(timeoutId);if (!response.ok) {throw new Error(`HTTP ${response.status}: ${response.statusText}`);}return await response.json();}catch (error) {console.error('Request failed:', error);throw error;}}function toggleElement(element, show) {if (show) {element.classList.remove('hidden');}else {element.classList.add('hidden');}}function formatUptime(seconds) {const hours = Math.floor(seconds / 3600);const minutes = Math.floor((seconds % 3600) / 60);const secs = seconds % 60;return [hours, minutes, secs] .map(v => v.toString().padStart(2, '0')) .join(':');}function formatBytes(bytes) {const thresh = 1000;if (Math.abs(bytes) < thresh) {return bytes + 'B';}const units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];let u = -1;do {bytes /= thresh;++u;}while (Math.abs(bytes) >= thresh && u < units.length - 1);return bytes.toFixed(1) + units[u];}function getWifiRssiColorClass(rssi) {if (rssi > -50) {return 'primary';}else if (rssi > -60) {return 'success';}else if (rssi > -70) {return 'warning';}else {return 'danger';}}function getElement(selector) {const element = document.querySelector(selector);if (!element) {console.warn(`Element not found: ${selector}`);}return element;}function getAllElements(selector) {return document.querySelectorAll(selector);}async function loadConfiguration() {try {const config = await makeRequest(CONFIG.ENDPOINTS.CONFIG);state.currentConfig = config;populateForm(config);updateVersionInfo(config.version);}catch (error) {console.error('Failed to load configuration:', error);showNotification('Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh', 'error');}}function populateForm(data) {const form = getElement('#config-form');if (!form) return;for (const [key, value] of Object.entries(data)) {const inputs = form.querySelectorAll(`[name="${key}"]`);inputs.forEach((input, index) => {if (input.type === 'checkbox' || input.type === 'radio') {input.checked = Array.isArray(value) ? value.includes(input.value) : input.value === value.toString();}else {input.value = Array.isArray(value) ? (value[index] || '') : value;}});}updateFormUI();}function updateFormUI() {updateSectionStates();updateStaticIPVisibility();updateUARTAdvancedVisibility();}function updateSectionStates() {const sections = [ {toggle: '#wifi-sta-enable', content: '.section:has(#wifi-sta-enable) .section-content' }, {toggle: '#wifi-ap-enable', content: '.section:has(#wifi-ap-enable) .section-content' }, {toggle: '#ntrip-srv-enable', content: '.section:has(#ntrip-srv-enable) .section-content' }, {toggle: '#ntrip-srv2-enable', content: '.section:has(#ntrip-srv2-enable) .section-content' }, {toggle: '#ntrip-cli-enable', content: '.section:has(#ntrip-cli-enable) .section-content' }];sections.forEach(({toggle, content }) => {const toggleEl = getElement(toggle);const contentEl = getElement(content);if (toggleEl && contentEl) {contentEl.style.opacity = toggleEl.checked ? '1' : '0.5';contentEl.style.pointerEvents = toggleEl.checked ? 'auto' : 'none';}});}function updateStaticIPVisibility() {const staticRadio = getElement('input[name="w_sta_static"][value="1"]');const staticConfig = getElement('#static-ip-config');if (staticRadio && staticConfig) {toggleElement(staticConfig, staticRadio.checked);}}function updateUARTAdvancedVisibility() {const uartConfig = getElement('#uart-config');if (uartConfig) {toggleElement(uartConfig, uartConfig.classList.contains('show'));}}async function handleFormSubmit(event) {event.preventDefault();if (state.isSubmitting) return;const form = event.target;if (!form.checkValidity()) {form.classList.add('was-validated');return;}state.isSubmitting = true;const submitButton = form.querySelector('button[type="submit"]');const originalText = submitButton.textContent;try {submitButton.disabled = true;submitButton.textContent = 'ƒêang l∆∞u...';const formData = serializeForm(form);await makeRequest(CONFIG.ENDPOINTS.CONFIG, {method: 'POST', body: JSON.stringify(formData) });showRestartModal();setTimeout(() => {state.reloadOnStatus = true;}, CONFIG.RESTART_WAIT_TIME);}catch (error) {console.error('Failed to save configuration:', error);showNotification('L·ªói khi l∆∞u c·∫•u h√¨nh', 'error');}finally {state.isSubmitting = false;submitButton.disabled = false;submitButton.textContent = originalText;}}async function updateStatus() {try {const status = await makeRequest(CONFIG.ENDPOINTS.STATUS);if (state.reloadOnStatus) {window.location.reload();return;}updateStatusDisplay(status);}catch (error) {console.error('Status update failed:', error);}finally {state.statusUpdateTimer = setTimeout(updateStatus, CONFIG.STATUS_UPDATE_INTERVAL);}}function updateStatusDisplay(status) {const uptimeEl = getElement('#uptime');if (uptimeEl && status.uptime) {uptimeEl.textContent = formatUptime(status.uptime);}const memoryEl = getElement('#memory');if (memoryEl && status.heap) {const percent = Math.round((status.heap.free / status.heap.total) * 100);memoryEl.textContent = `${percent}% free`;}updateWiFiStatus(status.wifi);updateNTRIPStatus(status.streams);}function updateWiFiStatus(wifi) {if (!wifi) return;const staStatus = getElement('#wifi-sta-status');if (staStatus) {if (!wifi.sta || !wifi.sta.active) {staStatus.textContent = 'Kh√¥ng ho·∫°t ƒë·ªông';}else if (!wifi.sta.connected) {staStatus.textContent = 'Kh√¥ng k·∫øt n·ªëi';}else {staStatus.textContent = `${wifi.sta.ssid}- ${wifi.sta.ip4}`;}}const apStatus = getElement('#wifi-ap-status');if (apStatus) {if (!wifi.ap || !wifi.ap.active) {apStatus.textContent = 'Kh√¥ng ho·∫°t ƒë·ªông';}else {apStatus.textContent = `${wifi.ap.ssid}- ${wifi.ap.devices}thi·∫øt b·ªã`;}}}function updateNTRIPStatus(streams) {if (!streams) return;const statusElements = [ {id: '#ntrip-srv-status', stream: 'ntrip_server' }, {id: '#ntrip-srv2-status', stream: 'ntrip_server_2' }, {id: '#ntrip-cli-status', stream: 'ntrip_client' }];statusElements.forEach(({id, stream }) => {const element = getElement(id);if (element && streams[stream]) {const stats = streams[stream];element.textContent = `${formatBytes(stats.total.in)}in / ${formatBytes(stats.total.out)}out`;}});}async function scanWiFiNetworks() {const scanButton = getElement('#wifi-scan');const networksSelect = getElement('#wifi-networks');if (!scanButton || !networksSelect) return;try {scanButton.disabled = true;scanButton.textContent = 'ƒêang qu√©t...';const networks = await makeRequest(CONFIG.ENDPOINTS.WIFI_SCAN);networksSelect.innerHTML = '<option value="">Ch·ªçn m·∫°ng...</option>';networks.forEach(network => {const option = document.createElement('option');option.value = network.ssid;option.textContent = `${network.ssid}(${network.rssi}dBm) ${network.authmode !== 'OPEN' ? 'üîí' : ''}`;networksSelect.appendChild(option);});toggleElement(networksSelect, true);}catch (error) {console.error('WiFi scan failed:', error);showNotification('Qu√©t WiFi th·∫•t b·∫°i', 'error');}finally {scanButton.disabled = false;scanButton.textContent = 'Qu√©t';}}function handleWiFiNetworkSelect(event) {const selectedSSID = event.target.value;const ssidInput = getElement('#wifi-ssid');if (ssidInput && selectedSSID) {ssidInput.value = selectedSSID;toggleElement(event.target, false);}}function showRestartModal() {const modal = getElement('#loading-modal');if (modal) {toggleElement(modal, true);}}function showNotification(message, type = 'info') {if (type === 'error') {alert('L·ªói: ' + message);}else {console.log(`${type.toUpperCase()}: ${message}`);}}function handleResetConfig() {if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√¥i ph·ª•c c·∫•u h√¨nh v·ªÅ m·∫∑c ƒë·ªãnh kh√¥ng?\\nT·∫•t c·∫£ c√†i ƒë·∫∑t hi·ªán t·∫°i s·∫Ω b·ªã m·∫•t.')) {const form = getElement('#config-form');if (form) {form.reset();updateFormUI();}}}function updateVersionInfo(version) {const versionEl = getElement('#project-version');if (versionEl && version) {versionEl.textContent = version;}}function setupEventListeners() {const toggles = getAllElements('input[type="checkbox"][id$="-enable"]');toggles.forEach(toggle => {toggle.addEventListener('change', debounce(updateSectionStates, 100));});const staticRadios = getAllElements('input[name="w_sta_static"]');staticRadios.forEach(radio => {radio.addEventListener('change', updateStaticIPVisibility);});const scanButton = getElement('#wifi-scan');if (scanButton) {scanButton.addEventListener('click', scanWiFiNetworks);}const networksSelect = getElement('#wifi-networks');if (networksSelect) {networksSelect.addEventListener('change', handleWiFiNetworkSelect);}const resetButton = getElement('#reset-config');if (resetButton) {resetButton.addEventListener('click', handleResetConfig);}if (form) {const debouncedSave = debounce(() => {console.log('Form changed - auto-save could be triggered');}, CONFIG.AUTO_SAVE_DELAY);form.addEventListener('change', debouncedSave);}}async function init() {console.log('ESP32 NTRIP Duo - Initializing...');try {setupEventListeners();await loadConfiguration();updateStatus();console.log('ESP32 NTRIP Duo - Initialized successfully');}catch (error) {console.error('Initialization failed:', error);showNotification('Kh·ªüi t·∫°o ·ª©ng d·ª•ng th·∫•t b·∫°i', 'error');}}function cleanup() {if (state.statusUpdateTimer) {clearTimeout(state.statusUpdateTimer);}}if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded', init);}else {init();}window.addEventListener('beforeunload', cleanup);})();